type User
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: owner, ownerField: "id", operations: [read, create, update] }
      { allow: groups, groups: ["User"], operations: [read] }
    ]
  )
  @key(name: "byName", fields: ["name", "createdAt"])
  @key(name: "byStatus", fields: ["status", "createdAt"]) {
  id: ID!
  name: String
  games: [UserGame] @connection(keyName: "gamesByUser", fields: ["id"])
  elo: Int
    @auth(
      rules: [
        { allow: groups, groups: ["Admin"] }
        { allow: groups, groups: ["User"], operations: [read] }
        {
          allow: private
          provider: iam
          operations: [create, read, update, delete]
        }
      ]
    )
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  status: StatusCreated!
}
type UserGame
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      { allow: groups, groups: ["User"], operations: [read, create] }
    ]
  )
  @key(name: "gamesByUser", fields: ["userId", "gameId"])
  @key(name: "usersByGame", fields: ["gameId", "userId"]) {
  id: ID!
  userId: ID!
  gameId: ID!
  user: [User] @connection(fields: ["userId"])
  game: [Game] @connection(fields: ["gameId"])
}

type Game
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      # { allow: groups, groups: ["User"], operations: [create] }
      { allow: owner, ownerField: "players" }
    ]
  )
  @key(name: "byCreatedAt", fields: ["status", "createdAt"]) {
  id: ID!
  Moves: [Move] @connection(keyName: "byGame", fields: ["id"])
  winner: ID
  players: [String!]!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  status: StatusCreated!
}

type Move
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"] }
      {
        allow: private
        provider: iam
        operations: [create, read, update, delete]
      }
      { allow: owner, ownerField: "players", operations: [read] }
    ]
  )
  @key(name: "byGame", fields: ["gameId", "createdAt"]) {
  id: ID!
  authorId: String!
  players: [String!]!
  gameId: ID!
  game: Game @connection(fields: ["gameId"])
  content: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  status: StatusCreated!
}

enum StatusCreated {
  CREATED
}

enum GameStatus {
  PENDING
  ENDED
}
